name: Playwright Tests with Allure Reports

# Manual workflow - only runs when manually triggered
# To run: Go to Actions tab ‚Üí Select this workflow ‚Üí Click "Run workflow"
on:
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Select browsers to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
          - mobile



jobs:
  # Stage 1: Run Playwright Tests
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15


    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Show selected browser
      run: |
        echo "Selected browser input: ${{ inputs.browsers }}"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check Node.js and npm versions
      run: |
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Verify browser installation
      run: |
        echo "Checking browser installations..."
        npx playwright --version
        echo "Browser binaries:"
        ls -la ~/.cache/ms-playwright/ || echo "No browser cache found"
        
    - name: Test network connectivity
      run: |
        echo "Testing network connectivity to target website..."
        curl -I https://www.saucedemo.com/ || echo "curl failed, trying wget..."
        wget --spider https://www.saucedemo.com/ || echo "wget also failed"
        echo "Network test completed"
      
    - name: Verify test setup
      run: |
        echo "Verifying Playwright setup for ${{ inputs.browsers }}..."
        if [ "${{ inputs.browsers }}" = "all" ]; then
          npx playwright test --list || echo "Test listing failed"
        else
          npx playwright test --list --project="${{ inputs.browsers }}" || echo "Test listing failed"
        fi
        
    - name: Run tests
      id: test-run
      timeout-minutes: 10
      run: |
        echo "Starting test execution..."
        if [ "${{ inputs.browsers }}" = "all" ]; then
          echo "Running tests on all browsers..."
          npx playwright test --reporter=allure-playwright --reporter=list
        else
          echo "Running tests on ${{ inputs.browsers }}..."
          npx playwright test --project="${{ inputs.browsers }}" --reporter=allure-playwright --reporter=list
        fi
        
        echo "Test execution completed. Checking allure-results..."
        ls -la allure-results/ || echo "No allure-results directory created"
      
    - name: Check test exit status
      if: always()
      run: |
        echo "Test exit status: ${{ steps.test-run.outcome }}"
        echo "Test exit code: ${{ steps.test-run.conclusion }}"
        echo "Test step result: ${{ steps.test-run.outputs }}"
        
    - name: List test results (for debugging)
      if: always()
      run: |
        echo "=== Allure Results Directory ==="
        ls -la allure-results/ || echo "No allure-results directory"
        echo "=== Test Results Directory ==="
        ls -la test-results/ || echo "No test-results directory"
        echo "=== Screenshots Directory ==="
        ls -la screenshots/ || echo "No screenshots directory"
        echo "=== Videos Directory ==="
        ls -la videos/ || echo "No videos directory"
        echo "=== Current Directory Contents ==="
        ls -la
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ inputs.browsers }}
        path: |
          allure-results/
          test-results/
          screenshots/
          videos/
        retention-days: 30

  # Stage 2: Generate Allure Report
  generate-report:
    name: Generate Allure Report
    needs: test
    runs-on: ubuntu-latest
    if: always()
    env:
      ALLURE_RESULTS: allure-results
      ALLURE_REPORT: allure-report
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: allure-results/
        pattern: allure-results-*
        merge-multiple: true
        
    - name: List downloaded results
      run: |
        echo "Checking downloaded test results..."
        ls -la allure-results/ || echo "No allure-results directory found"
        echo "Directory contents:"
        find . -name "*allure*" -type d || echo "No allure directories found"
        
        # Count test results
        echo "=== Test Results Count ==="
        if [ -d "allure-results" ]; then
          echo "Total allure-results files: $(ls allure-results/*.json 2>/dev/null | wc -l)"
          echo "Result files:"
          ls -la allure-results/*.json 2>/dev/null || echo "No JSON result files found"
        fi
        
    - name: Pull Allure Docker image
      run: docker pull pradapjackie/allure-reports-generation:1.0
      
    - name: Install Allure command line (fallback)
      run: |
        echo "Installing Allure command line as fallback..."
        curl -o allure-2.24.1.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.tgz
        tar -zxvf allure-2.24.1.tgz -C /opt/
        ln -s /opt/allure-2.24.1/bin/allure /usr/local/bin/allure
        echo "Allure command line installed"
        
    - name: Generate Allure report
      run: |
        echo "Generating Allure report..."
        
        # Check allure-results content first
        echo "=== Allure Results Content ==="
        ls -la allure-results/
        echo "=== Sample Result File ==="
        if [ -f "allure-results/$(ls allure-results/*.json | head -1)" ]; then
          head -20 "allure-results/$(ls allure-results/*.json | head -1)"
        fi
        
        # Try Docker first
        echo "Attempting with Docker..."
        if docker run --rm \
          --platform linux/amd64 \
          -v "$PWD:/app" \
          -w /app \
          pradapjackie/allure-reports-generation:1.0 \
          allure generate allure-results --clean -o allure-report; then
          echo "Docker approach successful!"
        else
          echo "Docker approach failed, using command line fallback..."
          allure generate allure-results --clean -o allure-report
        fi
        
        echo "Report generated successfully!"
        ls -la allure-report/
        
        # Check generated report structure
        echo "=== Generated Report Structure ==="
        find allure-report/ -type f -name "*.html" | head -5
        echo "=== Report Index ==="
        if [ -f "allure-report/index.html" ]; then
          grep -i "test" allure-report/index.html | head -10
        fi
          
    - name: Upload Allure report
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report/
        retention-days: 1

  # Stage 3: Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    needs: generate-report
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: github-pages
    permissions:
      pages: write
      id-token: write
      contents: read
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Allure report
      uses: actions/download-artifact@v4
      with:
        name: allure-report
        path: allure-report/
        
    - name: Check GitHub Pages status
      run: |
        echo "Checking if GitHub Pages is available..."
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Target URL: https://pradapjackie.github.io/automation-test-web-assesment/"
        echo "Repository owner: ${{ github.repository_owner }}"
        echo "Repository name: ${{ github.event.repository.name }}"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
        
    - name: Check repository access
      run: |
        echo "Checking repository access..."
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v4
      with:
        path: allure-report/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Verify deployment
      run: |
        echo "Deployment completed!"
        echo "Your Allure reports are now available at:"
        echo "https://pradapjackie.github.io/automation-test-web-assesment/"
        echo "Deployment ID: ${{ steps.deployment.outputs.deployment_id }}"
        echo "Deployment URL: ${{ steps.deployment.outputs.deployment_url }}"
        
    - name: Show final status
      run: |
        echo "=== DEPLOYMENT SUMMARY ==="
        echo "‚úÖ Allure report generated"
        echo "‚úÖ Report uploaded to GitHub Pages"
        echo "‚úÖ Deployment completed"
        echo "üåê Live URL: https://pradapjackie.github.io/automation-test-web-assesment/"
        echo "üìä View your test reports at the URL above"
