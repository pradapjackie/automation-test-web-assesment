name: Playwright Tests with Allure Reports

# Manual workflow - only runs when manually triggered
# To run: Go to Actions tab → Select this workflow → Click "Run workflow"
on:
  workflow_dispatch:
    inputs:
      browsers:
        description: 'Select browsers to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
          - mobile



jobs:
  # Stage 1: Run Playwright Tests
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15


    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Show selected browser
      run: |
        echo "Selected browser input: ${{ inputs.browsers }}"
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check Node.js and npm versions
      run: |
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Verify browser installation
      run: |
        echo "Checking browser installations..."
        npx playwright --version
        echo "Browser binaries:"
        ls -la ~/.cache/ms-playwright/ || echo "No browser cache found"
        
    - name: Test network connectivity
      run: |
        echo "Testing network connectivity to target website..."
        curl -I https://www.saucedemo.com/ || echo "curl failed, trying wget..."
        wget --spider https://www.saucedemo.com/ || echo "wget also failed"
        echo "Network test completed"
      
    - name: Verify test setup
      run: |
        echo "Verifying Playwright setup for ${{ inputs.browsers }}..."
        if [ "${{ inputs.browsers }}" = "all" ]; then
          npx playwright test --list || echo "Test listing failed"
        else
          npx playwright test --list --project="${{ inputs.browsers }}" || echo "Test listing failed"
        fi
        
    - name: Run tests
      id: test-run
      timeout-minutes: 10
      run: |
        echo "Running tests for: ${{ inputs.browsers }}"
        
        # Run tests using configured reporters from playwright.config.ts
        if [ "${{ inputs.browsers }}" = "all" ]; then
          npx playwright test
        else
          npx playwright test --project="${{ inputs.browsers }}"
        fi
        
        # Verify Allure results were created
        echo "Checking Allure results..."
        if [ -d "allure-results" ]; then
          echo "✅ Allure results directory exists"
          echo "Files in allure-results:"
          ls -la allure-results/
          echo "JSON files count: $(find allure-results/ -name '*.json' -type f | wc -l)"
          
          # Check if we have actual test results
          json_files=$(ls allure-results/*.json 2>/dev/null | head -1)
          if [ -n "$json_files" ] && [ -f "$json_files" ]; then
            echo "✅ Test result files found"
            echo "Sample result file content:"
            head -10 "$json_files"
          else
            echo "❌ No test result files found in allure-results!"
          fi
        else
          echo "❌ Allure results directory NOT created!"
          echo "Current directory contents:"
          ls -la
          echo "Looking for any test-related files:"
          find . -name "*.json" -o -name "*test*" -o -name "*result*" | head -10
        fi
      
    - name: Check test exit status
      if: always()
      run: |
        echo "Test exit status: ${{ steps.test-run.outcome }}"
        echo "Test exit code: ${{ steps.test-run.conclusion }}"
        echo "Test step result: ${{ steps.test-run.outputs }}"
        
    - name: List test results (for debugging)
      if: always()
      run: |
        echo "=== Allure Results Directory ==="
        ls -la allure-results/ || echo "No allure-results directory"
        echo "=== Test Results Directory ==="
        ls -la test-results/ || echo "No test-results directory"
        echo "=== Screenshots Directory ==="
        ls -la screenshots/ || echo "No screenshots directory"
        echo "=== Videos Directory ==="
        ls -la videos/ || echo "No videos directory"
        echo "=== Current Directory Contents ==="
        ls -la
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results
        path: |
          allure-results/
          test-results/
          screenshots/
          videos/
        retention-days: 30

  # Stage 2: Generate Allure Report
  generate-report:
    name: Generate Allure Report
    needs: test
    runs-on: ubuntu-latest
    if: always()
    env:
      ALLURE_RESULTS: allure-results
      ALLURE_REPORT: allure-report
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        name: allure-results
        path: ./allure-results/
        
    - name: Pull Allure Docker image
      run: docker pull pradapjackie/allure-reports-generation:1.0
        
    - name: Generate Allure report
      run: |
        echo "=== GENERATING ALLURE REPORT ==="
        
        # Check if we have allure-results
        if [ ! -d "allure-results" ] || [ -z "$(ls -A allure-results/ 2>/dev/null)" ]; then
          echo "❌ No allure-results found! Cannot generate report."
          exit 1
        fi
        
        echo "Allure results found:"
        ls -la allure-results/
        
        # Try Docker approach first
        echo "Attempting Docker generation..."
        if sudo docker run --rm \
          -v "$PWD:/app" \
          -w /app \
          pradapjackie/allure-reports-generation:1.0 \
          allure generate allure-results --clean -o allure-report; then
          echo "✅ Docker generation successful"
        else
          echo "❌ Docker failed, trying command line fallback..."
          
          # Install Allure command line
          curl -o allure-2.24.1.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.tgz
          sudo tar -zxvf allure-2.24.1.tgz -C /opt/
          sudo ln -s /opt/allure-2.24.1/bin/allure /usr/local/bin/allure
          
          # Generate report
          allure generate allure-results --clean -o allure-report
          echo "✅ Command line generation completed"
        fi
        
        # Verify report was created
        if [ -d "allure-report" ] && [ -f "allure-report/index.html" ]; then
          echo "✅ Allure report generated successfully!"
          echo "Report contents:"
          ls -la allure-report/
          echo "Report size: $(du -sh allure-report/)"
        else
          echo "❌ Allure report generation failed!"
          echo "Available directories:"
          ls -la
          exit 1
        fi
          
    - name: Upload Allure report
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report/
        retention-days: 1

  # Stage 3: Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    needs: generate-report
    runs-on: ubuntu-latest
    if: always()
    environment:
      name: github-pages
    permissions:
      pages: write
      id-token: write
      contents: read
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Allure report
      uses: actions/download-artifact@v4
      with:
        name: allure-report
        path: allure-report/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
        
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v4
      with:
        path: allure-report/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
